// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:



// A register:
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=outMuxA);
    Not(in=instruction[15], out=isMemoryAddress);
    Or(a=isMemoryAddress, b=instruction[5], out=writeToA);
    ARegister(in=outMuxA, load=writeToA, out=outA, out[0..14]=addressM);

// D register:
    And(a=instruction[4], b=instruction[15], out=writeToD);
    DRegister(in=ALUOut, load=writeToD, out=outD);

// Mux16 which decides between A register and M
    Mux16(a=outA, b=inM, sel=instruction[12], out=outMuxMorA);

// ALU: c1 bit ( tells us to make the x input (D output) zero
// c3 bit tells us if to zero the y input
// c5 bit tells us to compute x+y or x&y
    ALU(x=outD, y=outMuxMorA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], ng=isneg, zr=iszero, out=ALUOut, out=outM);

    And(a=instruction[15], b=instruction[3], out=writeM);

// PC:

    //figure if jump should accure
    Not(in=iszero, out=notzero);
    Not(in=isneg, out=notnegative);
    And(a=notnegative, b=notzero, out=ispositive);

    And(a=iszero, b=instruction[1], out=JEQ);
    And(a=isneg, b=instruction[2], out=JLT);
    And(a=ispositive, b=instruction[0], out=JGT);

    Or(a=JEQ, b=JLT, out=JEQorJLT);
    Or(a=JGT, b=JEQorJLT, out=isJump);

    And(a=isJump, b=instruction[15], out=loadPc);
    Not(in=loadPc, out=incPc);


    PC(in=outA, load=loadPc, inc=incPc, reset=reset, out[0..14]=pc);
}